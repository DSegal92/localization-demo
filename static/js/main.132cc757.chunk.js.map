{"version":3,"sources":["components/ServerLocalizationTextField.js","components/ServerLocalizations.js","components/BrowserView.js","App.jsx","serviceWorker.js","index.js","logo.svg"],"names":["Container","styled","div","TextArea","input","props","width","NonEditable","span","Editable","localizationString","setLocalizationString","useState","stringWidth","setStringWidth","value","onChange","e","string","target","length","localizationFile","setLocalizationFileValue","options","mode","ControlButton","Close","Minimize","Expand","localizedString","Localizations","test","App","setLocalizedString","useEffect","loadedFile","yaml","safeLoad","replace","console","log","JSON","stringify","localized","_","get","undefined","ServerLocalizationTextField","ServerLocalizations","BrowserView","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"8mCAOA,IAAMA,EAAYC,IAAOC,IAAV,KAOTC,EAAWF,IAAOG,MAAV,KAEF,SAAAC,GAAK,OAAIA,EAAMC,SAUrBC,EAAcN,IAAOO,KAAV,KAWXC,EAAWR,IAAOC,IAAV,KAMC,cAAoD,IAAjDQ,EAAgD,EAAhDA,mBAAoBC,EAA4B,EAA5BA,sBAA4B,EAGxCC,mBAAS,IAH+B,gCAI1BA,mBAAS,UAJiB,mBAIzDC,EAJyD,KAI5CC,EAJ4C,KAoBhE,OACE,kBAACd,EAAD,KACE,kBAAC,IAAD,KAPM,yBAUN,kBAACS,EAAD,KACE,kBAACF,EAAD,cACA,kBAACJ,EAAD,CAAUY,MAAQL,EACRJ,MAAQO,EACRG,SAAW,SAACC,GAAD,OAnBLC,EAmByBD,EAAEE,OAAOJ,MAlBtDD,EAAe,GAAD,OAVQ,GAUJI,EAAOE,OAAX,YACdT,EAAsBO,GAFH,IAACA,KAoBhB,kBAACX,EAAD,c,8FClER,IAAMP,EAAYC,IAAOC,IAAV,KAIA,cAAqD,IAAlDmB,EAAiD,EAAjDA,iBAAkBC,EAA+B,EAA/BA,yBAClC,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAYP,MAAQM,EAAmBE,QAAS,CAAEC,KAAM,QAAUR,SAAW,SAACC,GAAD,OAAOK,EAAyBL,Q,m1BCXnH,IAAMjB,EAAYC,IAAOC,IAAV,KAWTuB,EAAgBxB,IAAOC,IAAV,KAQbwB,EAAQzB,YAAOwB,EAAPxB,CAAH,KAKL0B,EAAW1B,YAAOwB,EAAPxB,CAAH,KAKR2B,EAAS3B,YAAOwB,EAAPxB,CAAH,KAKG,kBAAG4B,EAAH,EAAGA,gBAAH,OACb,kBAAC,EAAD,KACE,kBAACH,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,MAEA,4BAAMC,K,oVChCV,IAAM7B,EAAYC,IAAOC,IAAV,KAQT4B,EAAgB7B,IAAOC,IAAV,KAMb6B,EAAI,8DAgDKC,MA1Cf,WAAgB,IAAD,EACuCpB,mBAAS,4BADhD,mBACNF,EADM,KACcC,EADd,OAEwCC,mBAASmB,GAFjD,mBAENV,EAFM,KAEYC,EAFZ,OAGiCV,qBAHjC,mBAGNiB,EAHM,KAGWI,EAHX,KA6Bb,OAxBAC,qBAAU,WACR,IAAIC,EAEJ,IACEA,EAAaC,IAAKC,SAAShB,EAAiBiB,QAAQ,MAAO,SAE7D,SACEC,QAAQC,IAAI,QAGdD,QAAQC,IAAIC,KAAKC,UAAUP,IAG3B,IAAMQ,EAAYC,IAAEC,IAAIV,EAAYzB,GAGlCuB,EADyB,kBAAfU,EACSA,OAGAG,KAGpB,CAACzB,EAAkBX,IAGpB,kBAAC,EAAD,KACE,kBAACoB,EAAD,KACE,kBAACiB,EAAD,CAA6BrC,mBAAqBA,EACrBC,sBAAwBA,IACrD,kBAACqC,EAAD,CAAqB3B,iBAAmBA,EACnBC,yBAA2BA,KAElD,kBAAC2B,EAAD,CAAapB,gBAAkBA,MCxDjBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.132cc757.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport Highlight from 'react-highlight.js'\nimport CodeMirror from 'react-codemirror'\nimport styled from 'styled-components'\n\nimport 'codemirror/mode/haml/haml'\n\nconst Container = styled.div`\n  position: relative;\n  width: 50vw;\n  height: 300px;\n  background-color: #232323;\n`\n\nconst TextArea = styled.input`\n  display: inline;\n  width: ${ props => props.width};\n  background-color: #232323;\n  border: 0;\n  padding: 0;\n  outline: 0;\n  font-family:  source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace;\n  color: rgb(165, 194, 97);\n  font-size: 1em;\n`\n\nconst NonEditable = styled.span`\n  display: inline;\n  background-color: #232323;\n  border: 0;\n  padding: 0;\n  outline: 0;\n  font-family:  source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace;\n  color: white;\n  font-size: 1em;\n`\n\nconst Editable = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 60px;\n`\n\nexport default ({ localizationString, setLocalizationString }) => {\n  const CHARACTER_WIDTH = 10\n\n  const [code, setCode] = useState('')\n  const [stringWidth, setStringWidth] = useState(\"240px\")\n\n  const getPixelWidth = (string) => (\n    `${string.length * CHARACTER_WIDTH}px`\n  )\n\n  const updateString = (string) => {\n    setStringWidth(`${string.length * CHARACTER_WIDTH}px`)\n    setLocalizationString(string)\n  }\n\n  const test = `\n  .row\n    %h1\n  `\n\n  return (\n    <Container>\n      <Highlight>\n        { test }\n      </Highlight>\n      <Editable>\n        <NonEditable>= t('</NonEditable>\n        <TextArea value={ localizationString }\n                  width={ stringWidth }\n                  onChange={ (e) => updateString(e.target.value)  }/>\n        <NonEditable>')</NonEditable>\n      </Editable>\n    </Container>\n  )\n}\n","import React, { useState } from 'react'\nimport Highlight from 'react-highlight.js'\nimport CodeMirror from 'react-codemirror'\nimport styled from 'styled-components'\n\nimport 'codemirror/mode/yaml/yaml'\n\nconst Container = styled.div`\n  width: 50vw;\n`\n\nexport default ({ localizationFile, setLocalizationFileValue }) => {\n  return (\n    <Container>\n      <CodeMirror value={ localizationFile } options={{ mode: 'yaml' }} onChange={ (e) => setLocalizationFileValue(e) }/>\n    </Container>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  background-color: white;\n  width: 50vw;\n  height: 600px;\n  margin-top: 80px;\n  border-radius: 10px;\n  border-top: 40px solid rgb(231, 234, 237);\n  position: relative;\n  padding: 15px;\n`\n\nconst ControlButton = styled.div`\n  width: 15px;\n  height: 15px;\n  border-radius: 15px;\n  position: absolute;\n  top: -25px;\n`\n\nconst Close = styled(ControlButton)`\n  background-color: rgb(239, 109, 93);\n  left: 15px;\n`\n\nconst Minimize = styled(ControlButton)`\n  background-color: rgb(245, 194, 80);\n  left: 40px;\n`\n\nconst Expand = styled(ControlButton)`\n  background-color: rgb(99, 201, 86);\n  left: 65px;\n`\n\nexport default ({ localizedString }) => (\n  <Container>\n    <Close />\n    <Minimize />\n    <Expand />\n\n    <h1>{ localizedString }</h1>\n  </Container>\n)\n","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ServerLocalizationTextField from './components/ServerLocalizationTextField'\nimport ServerLocalizations from './components/ServerLocalizations'\nimport styled from 'styled-components'\nimport 'codemirror/lib/codemirror.css'\nimport yaml from 'js-yaml'\nimport _ from 'lodash'\nimport BrowserView from './components/BrowserView'\n\nconst Container = styled.div`\n  background-color: #002b36;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst Localizations = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`\n\nconst test = `\n  views:\n    test_strings:\n      hello: hello, world!\n`\n\nfunction App() {\n  const [localizationString, setLocalizationString] = useState('views.test_strings.hello')\n  const [localizationFile, setLocalizationFileValue] = useState(test)\n  const [localizedString, setLocalizedString] = useState()\n\n  useEffect(() => {\n    let loadedFile\n\n    try {\n      loadedFile = yaml.safeLoad(localizationFile.replace(/\\t/g, '    '))\n    }\n    catch {\n      console.log('nope')\n    }\n\n    console.log(JSON.stringify(loadedFile))\n\n\n    const localized = _.get(loadedFile, localizationString)\n\n    if ((typeof localized) === \"string\") {\n      setLocalizedString(localized)\n    }\n    else {\n      setLocalizedString(undefined)\n    }\n\n  }, [localizationFile, localizationString])\n\n  return (\n    <Container>\n      <Localizations>\n        <ServerLocalizationTextField localizationString={ localizationString }\n                                     setLocalizationString={ setLocalizationString }/>\n        <ServerLocalizations localizationFile={ localizationFile }\n                             setLocalizationFileValue={ setLocalizationFileValue }/>\n      </Localizations>\n      <BrowserView localizedString={ localizedString }/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}