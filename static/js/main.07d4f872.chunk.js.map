{"version":3,"sources":["images/icon.png","components/FakeButPlausibleAndroidLayout.js","components/EditableString.js","components/FakeCodeFile.js","components/LocalizationFiles.js","components/LocalizedString.js","components/DeviceView.js","utilities.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","React","memo","TextArea","styled","input","props","width","NonEditable","span","Editable","div","String","verticalOffset","AndroidPrefix","EqualSign","updateLocalizationString","value","useState","stringWidth","setStringWidth","onChange","e","string","target","length","Container","ResourceString","localizationStrings","EditableString","newValue","FakeButPlausibleAndroidLayout","languages","updateFile","language","setLanguage","style","backgroundColor","marginBottom","map","_","index","onClick","l","options","mode","LocalizedString","stringMissing","color","localizations","stringKey","undefined","Header","Body","CTA","Controls","Back","Middle","Right","Localized","src","Icon","alt","xmlToKeyValue","xml","kv","x","DOMParser","parseFromString","documentElement","strings","Object","values","childNodes","filter","y","nodeName","getAttribute","nodeValue","i","Localizations","Preview","language_1","reducer","state","action","type","console","log","file","text","localizationString","Error","App","INITIAL_STATE","language_2","company_name","header","body","cta","useReducer","dispatch","useEffect","FakeCodeFile","LocalizationFiles","updateLocalizationsOnFileChange","DeviceView","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,sKCyF5BC,MAAMC,MAtFI,WA+EvB,OACE,kBAAC,IAAD,KA/EQ,6xF,8mCCDZ,IAAMC,EAAWC,IAAOC,MAAV,KAEF,SAAAC,GAAK,OAAIA,EAAMC,SAWrBC,EAAcJ,IAAOK,KAAV,KAWXC,EAAWN,IAAOO,IAAV,KAYRC,EAASR,IAAOO,IAAV,KACH,SAAAL,GAAK,gBAAOA,EAAMO,eAAb,SAKRC,EAAgBV,YAAOI,EAAPJ,CAAH,KACbW,EAAYX,YAAOI,EAAPJ,CAAH,KAEA,cAA0D,IAAvDY,EAAsD,EAAtDA,yBAA0BC,EAA4B,EAA5BA,MAAOJ,EAAqB,EAArBA,eAAqB,EAGhCK,mBAAS,SAHuB,mBAG/DC,EAH+D,KAGlDC,EAHkD,KAUtE,OACE,kBAAC,EAAD,CAAQP,eAAiBA,GACvB,kBAACH,EAAD,KACE,kBAACI,EAAD,qBACA,kBAACC,EAAD,UACA,kBAACZ,EAAD,CAAUc,MAAQA,EACRV,MAAQY,EACRE,SAAW,SAACC,GAAD,OAZLC,EAYyBD,EAAEE,OAAOP,MAXtDG,EAAe,GAAD,OALQ,GAKJG,EAAOE,OAAX,YACdT,EAAyBO,GAFN,IAACA,Q,0LC9CxB,IAAMG,EAAYtB,IAAOO,IAAV,KAQTgB,EAAiB,SAAC,GAAD,IAAGJ,EAAH,EAAGA,OAAQV,EAAX,EAAWA,eAAgBe,EAA3B,EAA2BA,oBAAqBZ,EAAhD,EAAgDA,yBAAhD,OACrB,kBAACa,EAAD,CAAgBZ,MAAQW,EAAoBL,GAC5BP,yBAA2B,SAACc,GAAD,OAAcd,EAAyBO,EAAQO,IAC1EjB,eAAiBA,KAepBZ,MAAMC,MAZH,SAACI,GACjB,OACE,kBAACoB,EAAD,KACE,kBAACK,EAAD,MACA,kBAAC,EAAD,eAAgBR,OAAS,eAAiBV,eAAiB,KAAUP,IACrE,kBAAC,EAAD,eAAgBiB,OAAS,SAAWV,eAAiB,KAAUP,IAC/D,kBAAC,EAAD,eAAgBiB,OAAS,OAASV,eAAiB,MAAWP,IAC9D,kBAAC,EAAD,eAAgBiB,OAAS,MAAQV,eAAiB,MAAWP,Q,4HCpBnE,IAAMoB,EAAYtB,IAAOO,IAAV,KAIA,cAAgC,IAA7BqB,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAAiB,EACZf,mBAAS,cADG,mBACrCgB,EADqC,KAC3BC,EAD2B,KAG5C,OACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAASC,MAAO,CAAEC,gBAAiB,QAASC,aAAc,IACtDN,EAAUO,KAAI,SAACC,EAAGC,GAAJ,OACZ,kBAAC,IAAD,CAAKC,QAAS,kBAAMP,EAAY,YAAD,OAAaM,EAAM,MAAlD,YAAmEA,EAAQ,OAI/ET,EAAUO,KAAI,SAAAI,GAAC,OACf,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAY1B,MAAQ0B,EACRC,QAAS,CAAEC,KAAM,OACjBxB,SAAW,SAACC,GAAD,OAAOW,EAAWC,EAAUZ,a,uHCzB7D,IAAMwB,EAAkB1C,IAAOK,KAAV,KACV,SAAAH,GAAK,OAAIA,EAAMyC,cAAgB,OAAUzC,EAAM0C,OAAS,UAC7C,SAAA1C,GAAK,OAAIA,EAAMyC,cAAgB,UAAY,iBAGlD,kBAAGE,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,UAAWF,EAA7B,EAA6BA,MAA7B,OACb,kBAACF,EAAD,CAAiBE,MAAQA,EACRD,mBAA6CI,IAA7BF,EAAcC,IAC3CD,EAAcC,IAAc,mB,0pDCNlC,IAAMxB,EAAYtB,IAAOO,IAAV,KAYTyC,EAAShD,IAAOO,IAAV,KAUN0C,EAAOjD,IAAOO,IAAV,KAOJ2C,EAAMlD,IAAOO,IAAV,KAcH4C,GAAWnD,IAAOO,IAAV,KAaR6C,GAAOpD,IAAOO,IAAV,KAMJ8C,GAASrD,IAAOO,IAAV,KAON+C,GAAQtD,IAAOO,IAAV,KAOI,eAA6C,IAA1CsC,EAAyC,EAAzCA,cAAerB,EAA0B,EAA1BA,oBACzB+B,EAAY,SAACT,EAAW5C,GAAZ,OAChB,kBAAC,EAAD,eAAiB2C,cAAgBA,EAChBC,UAAYtB,EAAoBsB,IAC3B5C,KAGxB,OACE,kBAAC,EAAD,KACE,kBAAC8C,EAAD,KACE,yBAAKQ,IAAMC,IAAOtD,MAAM,MAAMuD,IAAI,oBAClC,4BAAMH,EAAU,iBAChB,4BAAMA,EAAU,YAElB,kBAACN,EAAD,KACE,2BAAKM,EAAU,SACf,kBAACL,EAAD,KAAK,8BAAQK,EAAU,MAAO,CAAEX,MAAO,YAEzC,kBAACO,GAAD,KACE,kBAACC,GAAD,eACA,kBAACC,GAAD,MACA,kBAACC,GAAD,SCtGKK,GAAgB,SAACC,GAC5B,IAWE,IAVA,IAAIC,EAAK,GAILC,GAHS,IAAIC,WACGC,gBAAgBJ,EAAI,YAEzBK,gBACXC,EAAUC,OAAOC,OAAON,EAAEO,YACTC,QAAO,SAAAC,GAAC,MAAmB,WAAfA,EAAEC,YACdrC,KAAI,SAAAoC,GAAC,MAAI,CAACA,EAAEE,aAAa,QACfF,EAAEF,WAAW,GAAGK,cAEvCC,EAAI,EAAGA,EAAIT,EAAQ7C,OAAQsD,IACjCd,EAAGK,EAAQS,GAAG,IAAMT,EAAQS,GAAG,GAGjC,OAAOd,EAET,SACE,S,0mCCXJ,IAAMvC,GAAYtB,IAAOO,IAAV,MAUTqE,GAAgB5E,IAAOO,IAAV,MAObsE,GAAU7E,IAAOO,IAAV,MAMPuE,GAAU,gsBAeVC,GAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,iBAEH,OADAC,QAAQC,IAAI,MACL,GAAP,GAAYJ,EAAZ,eAAoBC,EAAOnD,SAA3B,MAA2CkD,EAAMC,EAAOnD,UAAxD,CAAmEoC,QAASe,EAAOf,YACrF,IAAK,cAEH,OADAiB,QAAQC,IAAIH,GACL,GAAP,GAAYD,EAAZ,eAAoBC,EAAOnD,SAA3B,MAA2CkD,EAAMC,EAAOnD,UAAxD,CAAmEuD,KAAMJ,EAAOK,SAClF,IAAK,6BAEH,OADAH,QAAQC,IAAIH,GACL,GAAP,GAAYD,EAAZ,CAAmBxD,oBAAoB,GAAD,GAAOwD,EAAK,oBAAZ,eAAsCC,EAAOM,mBAAqBN,EAAOpE,UACjH,QACE,MAAM,IAAI2E,QAqDDC,OAjDf,WACE,IAAMC,EAAgB,CAAEZ,WAAY,CAAEO,KAAMP,GAAYZ,QAASP,GAAcmB,KACvDa,WAAY,CAAEN,KAAM,GAAInB,QAAS,IACjC1C,oBAAqB,CACnBoE,aAAc,eACdC,OAAQ,SACRC,KAAM,OACNC,IAAK,mBAPlB,EAUqBC,qBAAWjB,GAASW,GAVzC,mBAUN7C,EAVM,KAUSoD,EAVT,OAWmBnF,mBAAS,cAX5B,mBAWNgB,EAXM,KAWIC,EAXJ,KAsBb,OAJAmE,qBAAU,WACRf,QAAQC,IAAIvC,MAIZ,kBAAC,GAAD,KACE,kBAAC+B,GAAD,KACE,kBAACuB,EAAD,CAAc3E,oBAAsBqB,EAAa,oBACnCjC,yBACE,SAAC2E,EAAoB1E,GAArB,OAA+BoF,EAAS,CAAEf,KAAM,6BACNK,qBACA1E,aAG1D,kBAACuF,EAAD,CAAmBxE,UAAY,CAACiB,EAAa,WAAb,KAAqCA,EAAa,WAAb,MAClDhB,WAAa,SAACC,EAAUwD,GAAX,OApBE,SAACxD,EAAUwD,GACjDW,EAAS,CAAEf,KAAM,cAAepD,WAAUwD,SAC1CW,EAAS,CAAEf,KAAM,iBAAkBpD,WAAUoC,QAASP,GAAc2B,KAkBZe,CAAgCvE,EAAUwD,OAEhG,kBAACT,GAAD,KACE,6BACE,4BAAQ5D,SAAW,SAACC,GAAQa,EAAYb,EAAEE,OAAOP,QAAWA,MAAQiB,GAClE,4BAAQjB,MAAM,cAAd,cACA,4BAAQA,MAAM,cAAd,gBAGJ,kBAACyF,GAAD,CAAYzD,cAAgBA,EAAcf,GAAd,QAChBN,oBAAsBqB,EAAa,yBC7FnC0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.07d4f872.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.8a88085a.png\";","import React from 'react'\nimport Highlight from 'react-highlight.js'\n\nconst AndroidishLayout = () => {\n  const test = `\n    <LinearLayout\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"4dp\"\n        android:orientation=\"horizontal\">\n\n        <ImageView\n            android:id=\"@+id/imageViewLocalizeHQLogo\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginLeft=\"16dp\"\n            android:layout_marginStart=\"16dp\"\n            android:layout_marginTop=\"8dp\"\n            app:srcCompat=\"@drawable/localize-logo\" />\n\n        <TextView\n            android:id=\"@+id/localizeHQCompanyName\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginBottom=\"22dp\"\n            android:layout_marginLeft=\"8dp\"\n            android:layout_marginStart=\"8dp\"\n            android:layout_marginTop=\"4dp\"\n            android:fontFamily=\"sans-serif\"\n            android:letterSpacing=\"0.04\"\n\n            android:textColor=\"#000000\"\n            android:textSize=\"20sp\"\n            android:textStyle=\"bold\" />\n\n        <TextView\n            android:id=\"@+id/messageHeader\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginBottom=\"22dp\"\n            android:layout_marginLeft=\"8dp\"\n            android:layout_marginStart=\"8dp\"\n            android:layout_marginTop=\"4dp\"\n            android:fontFamily=\"sans-serif-light\"\n            android:letterSpacing=\"0.04\"\n\n            android:textColor=\"#000000\"\n            android:textSize=\"18sp\"\n            android:textStyle=\"bold\" />\n\n        <TextView\n            android:id=\"@+id/messageBody\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginBottom=\"22dp\"\n            android:layout_marginLeft=\"8dp\"\n            android:layout_marginStart=\"8dp\"\n            android:layout_marginTop=\"4dp\"\n            android:fontFamily=\"sans-serif-light\"\n            android:letterSpacing=\"0.04\"\n\n            android:textColor=\"#000000\"\n            android:textSize=\"14sp\"\n            android:textStyle=\"normal\" />\n\n        <TextView\n            android:id=\"@+id/callToAction\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginBottom=\"22dp\"\n            android:layout_marginLeft=\"8dp\"\n            android:layout_marginStart=\"8dp\"\n            android:layout_marginTop=\"4dp\"\n            android:fontFamily=\"sans-serif-light\"\n            android:letterSpacing=\"0.04\"\n\n            android:textColor=\"#ffffff\"\n            android:textSize=\"14sp\"\n            android:textStyle=\"normal\" />\n    </LinearLayout>\n  `\n\n  return (\n    <Highlight>\n      { test }\n    </Highlight>\n  )\n}\n\nexport default React.memo(AndroidishLayout)\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nconst TextArea = styled.input`\n  display: inline;\n  width: ${ props => props.width};\n  background-color: #232323;\n  border: 0;\n  padding: 0;\n  outline: 0;\n  font-family:  source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace;\n  color: rgb(165, 194, 97);\n  font-size: 1em;\n  position: relative;\n`\n\nconst NonEditable = styled.span`\n  display: inline;\n  background-color: #232323;\n  border: 0;\n  padding: 0;\n  outline: 0;\n  font-family:  source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace;\n  color: white;\n  font-size: 1em;\n`\n\nconst Editable = styled.div`\n  background-color: red;\n\n  ::after {\n    position: absolute;\n    z-index: 9;\n    right: -20px;\n    content: '←';\n    color: white;\n  }\n`\n\nconst String = styled.div`\n  top: ${props => `${props.verticalOffset}px` };\n  left: 122px;\n  position: absolute;\n`\n\nconst AndroidPrefix = styled(NonEditable)`color: #6d9cbe;`\nconst EqualSign = styled(NonEditable)`color: #e8bf6a;`\n\nexport default ({ updateLocalizationString, value, verticalOffset }) => {\n  const CHARACTER_WIDTH = 10\n\n  const [stringWidth, setStringWidth] = useState(\"240px\")\n\n  const updateString = (string) => {\n    setStringWidth(`${string.length * CHARACTER_WIDTH}px`)\n    updateLocalizationString(string)\n  }\n\n  return (\n    <String verticalOffset={ verticalOffset }>\n      <Editable>\n        <AndroidPrefix>android:text</AndroidPrefix>\n        <EqualSign>=</EqualSign>\n        <TextArea value={ value }\n                  width={ stringWidth }\n                  onChange={ (e) => updateString(e.target.value)  }/>\n      </Editable>\n    </String>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport FakeButPlausibleAndroidLayout from './FakeButPlausibleAndroidLayout'\nimport EditableString from './EditableString'\n\nimport 'codemirror/mode/haml/haml'\n\nconst Container = styled.div`\n  position: relative;\n  width: 50vw;\n  height: 700px;\n  background-color: #232323;\n  overflow: scroll;\n`\n\nconst ResourceString = ({ string, verticalOffset, localizationStrings, updateLocalizationString }) => (\n  <EditableString value={ localizationStrings[string] }\n                  updateLocalizationString={ (newValue) => updateLocalizationString(string, newValue) }\n                  verticalOffset={ verticalOffset }/>\n)\n\nconst TextField = (props) => {\n  return (\n    <Container>\n      <FakeButPlausibleAndroidLayout />\n      <ResourceString string={ 'company_name' } verticalOffset={ 502 } {...props }/>\n      <ResourceString string={ 'header' } verticalOffset={ 787 } {...props }/>\n      <ResourceString string={ 'body' } verticalOffset={ 1072 } {...props }/>\n      <ResourceString string={ 'cta' } verticalOffset={ 1357 } {...props }/>\n    </Container>\n  )\n}\n\nexport default React.memo(TextField)\n","import React, { useState } from 'react'\nimport CodeMirror from 'react-codemirror'\nimport styled from 'styled-components'\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\nimport 'codemirror/mode/xml/xml'\n\nconst Container = styled.div`\n  width: 50vw;\n`\n\nexport default ({ languages, updateFile }) => {\n  const [language, setLanguage] = useState('language_1')\n\n  return (\n    <Tabs>\n    <TabList style={{ backgroundColor: 'white', marginBottom: 0 }}>\n      { languages.map((_, index) =>\n          <Tab onClick={() => setLanguage(`language_${index+1}`) }>Language {index + 1}</Tab>\n        )\n      }\n    </TabList>\n    { languages.map(l => (\n      <TabPanel>\n        <Container>\n          <CodeMirror value={ l }\n                      options={{ mode: 'xml' }}\n                      onChange={ (e) => updateFile(language, e) }/>\n        </Container>\n      </TabPanel>\n    ))}\n  </Tabs>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst LocalizedString = styled.span`\n  color: ${props => props.stringMissing ? '#FFF' : (props.color || '#000') };\n  background-color: ${props => props.stringMissing ? '#FF0000' : 'transparent' };\n`\n\nexport default ({ localizations, stringKey, color }) => (\n  <LocalizedString color={ color }\n                   stringMissing={ localizations[stringKey] === undefined }>\n    { localizations[stringKey] || \"String Missing\" }\n  </LocalizedString>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport LocalizedString from './LocalizedString'\nimport Icon from '../images/icon.png'\n\nconst Container = styled.div`\n  background-color: white;\n  width: 360px;\n  height: 750px;\n  margin-top: 80px;\n  border-radius: 30px;\n  border: 20px solid #171717;\n  position: relative;\n  padding: 15px;\n  overflow-x: hidden;\n`\n\nconst Header = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: wrap;\n  justify-content: center;\n  text-align: center;\n  margin-top: 20px;\n`\n\nconst Body = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n  align-items: center;\n`\n\nconst CTA = styled.div`\n  margin-top: 60px;\n  font-size: 18px;\n  font-weight: 700;\n  background-color: #007bff;\n  padding: 15px 20px 15px 20px;\n  border-radius: 15px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #0069d9;\n  }\n`\n\nconst Controls = styled.div`\n  position: absolute;\n  bottom: 0;\n  width: 390px;\n  height: 60px;\n  background-color: #444;\n  left: 0px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  align-items: center;\n`\n\nconst Back = styled.div`\n  font-size: 24px;\n  color: #FFF;\n  font-weight: 700;\n`\n\nconst Middle = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 20px;\n  background-color: #FFF;\n`\n\nconst Right = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 5px;\n  background-color: #FFF;\n`\n\nexport default ({ localizations, localizationStrings }) => {\n  const Localized = (stringKey, props) => (\n    <LocalizedString localizations={ localizations }\n                     stringKey={ localizationStrings[stringKey] }\n                     { ...props }/>\n  )\n\n  return (\n    <Container>\n      <Header>\n        <img src={ Icon } width='100' alt=\"LocalizeHQ Icon\"/>\n        <h1>{ Localized('company_name') }</h1>\n        <h2>{ Localized('header') }</h2>\n      </Header>\n      <Body>\n        <p>{ Localized('body') }</p>\n        <CTA><span>{ Localized('cta', { color: '#FFF' } ) }</span></CTA>\n      </Body>\n      <Controls>\n        <Back>◄</Back>\n        <Middle />\n        <Right />\n      </Controls>\n    </Container>\n  )\n}\n","export const xmlToKeyValue = (xml) => {\n  try {\n    let kv = {}\n    let parser = new DOMParser();\n    let xmlDoc = parser.parseFromString(xml,\"text/xml\");\n\n    let x = xmlDoc.documentElement;\n    let strings = Object.values(x.childNodes)\n                        .filter(y => y.nodeName === 'string')\n                        .map(y => [y.getAttribute('name'),\n                                   y.childNodes[0].nodeValue])\n\n    for(let i = 0; i < strings.length; i++) {\n      kv[strings[i][0]] = strings[i][1]\n    }\n\n    return kv\n  }\n  catch {\n    return undefined\n  }\n}\n","import React, { useState, useReducer, useEffect } from 'react';\nimport FakeCodeFile from './components/FakeCodeFile'\nimport LocalizationFiles from './components/LocalizationFiles'\nimport styled from 'styled-components'\nimport 'codemirror/lib/codemirror.css'\nimport DeviceView from './components/DeviceView'\nimport { xmlToKeyValue } from './utilities'\n\nconst Container = styled.div`\n  background-color: #002b36;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`\n\nconst Localizations = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Preview = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst language_1 = `\n  <resources>\n      <string name=\"company_name\">LocalizeHQ</string>\n      <string name=\"heeder\">Home Sweet Home for Localization Professionals</string>\n      <string name=\"body\">If you are in the localization industry, LocalizeHQ\n                          is the number one place on the web for you. From\n                          blog posts, to forums, to discounts on localization\n                          software, LocalizeHQ is a one-stop shop for all\n                          your localization needs. Join us today and start\n                          contributing to the best community in the industry!\n      </string>\n      <string name=\"cta\">Join Today!</string>\n  </resources>\n`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_STRINGS':\n      console.log('ho')\n      return { ...state, [action.language]: { ...state[action.language], strings: action.strings }}\n    case 'UPDATE_FILE':\n      console.log(action)\n      return { ...state, [action.language]: { ...state[action.language], file: action.text } }\n    case 'UPDATE_LOCALIZATION_STRING':\n      console.log(action)\n      return { ...state, localizationStrings: { ...state['localizationStrings'], [action.localizationString]: action.value } }\n    default:\n      throw new Error();\n  }\n}\n\nfunction App() {\n  const INITIAL_STATE = { language_1: { file: language_1, strings: xmlToKeyValue(language_1) },\n                          language_2: { file: '', strings: {} },\n                          localizationStrings: {\n                            company_name: 'company_name',\n                            header: 'header',\n                            body: 'body',\n                            cta: 'call_to_action'\n                          }}\n\n  const [localizations, dispatch] = useReducer(reducer, INITIAL_STATE);\n  const [language, setLanguage] = useState('language_1')\n\n  const updateLocalizationsOnFileChange = (language, text) => {\n    dispatch({ type: 'UPDATE_FILE', language, text })\n    dispatch({ type: 'UPDATE_STRINGS', language, strings: xmlToKeyValue(text) })\n  }\n\n  useEffect(() => {\n    console.log(localizations)\n  })\n\n  return (\n    <Container>\n      <Localizations>\n        <FakeCodeFile localizationStrings={ localizations['localizationStrings'] }\n                      updateLocalizationString={\n                        (localizationString, value) => dispatch({ type: 'UPDATE_LOCALIZATION_STRING',\n                                                                  localizationString,\n                                                                  value })\n                      }\n        />\n        <LocalizationFiles languages={ [localizations['language_1']['file'], localizations['language_2']['file'] ] }\n                           updateFile={ (language, text) => updateLocalizationsOnFileChange(language, text) }/>\n      </Localizations>\n      <Preview>\n        <div>\n          <select onChange={ (e) => { setLanguage(e.target.value) } } value={ language }>\n            <option value=\"language_1\">Language 1</option>\n            <option value=\"language_2\">Language 2</option>\n          </select>\n        </div>\n        <DeviceView localizations={ localizations[language]['strings'] }\n                    localizationStrings={ localizations['localizationStrings'] }/>\n      </Preview>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}