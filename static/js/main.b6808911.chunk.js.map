{"version":3,"sources":["components/FakeButPlausibleAndroidLayout.js","components/ServerLocalizationTextField.js","components/ServerLocalizations.js","components/BrowserView.js","utilities.js","App.jsx","serviceWorker.js","index.js"],"names":["React","memo","Container","styled","div","TextArea","input","props","width","NonEditable","span","Editable","AndroidPrefix","EqualSign","String1","localizationString","setLocalizationString","useState","stringWidth","setStringWidth","FakeButPlausibleAndroidLayout","value","onChange","e","string","target","length","languages","updateFile","language","setLanguage","style","backgroundColor","marginBottom","map","_","index","onClick","l","options","mode","Notch","localizations","xmlToKeyValue","xml","kv","x","DOMParser","parseFromString","documentElement","strings","Object","values","childNodes","filter","y","nodeName","getAttribute","nodeValue","i","Localizations","Preview","language_1","language_2","reducer","state","action","type","console","log","identifier","text","Error","App","INITIAL_STATE","useReducer","dispatch","ServerLocalizationTextField","ServerLocalizations","BrowserView","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6808911.chunk.js","sourcesContent":["import React from 'react'\nimport Highlight from 'react-highlight.js'\n\nconst AndroidishLayout = () => {\n  const test = `\n    <LinearLayout\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"4dp\"\n        android:orientation=\"horizontal\">\n\n        <ImageView\n            android:id=\"@+id/imageViewTipoProduto\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginLeft=\"16dp\"\n            android:layout_marginStart=\"16dp\"\n            android:layout_marginTop=\"8dp\"\n            app:srcCompat=\"@drawable/localize-logo\" />\n\n        <TextView\n            android:id=\"@+id/textViewTipoProduto\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginBottom=\"22dp\"\n            android:layout_marginLeft=\"8dp\"\n            android:layout_marginStart=\"8dp\"\n            android:layout_marginTop=\"4dp\"\n            android:fontFamily=\"sans-serif-light\"\n            android:letterSpacing=\"0.04\"\n\n            android:textColor=\"#ffffff\"\n            android:textSize=\"14sp\"\n            android:textStyle=\"normal\" />\n\n        <TextView\n            android:id=\"@+id/textViewTipoProduto\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginBottom=\"22dp\"\n            android:layout_marginLeft=\"8dp\"\n            android:layout_marginStart=\"8dp\"\n            android:layout_marginTop=\"4dp\"\n            android:fontFamily=\"sans-serif-light\"\n            android:letterSpacing=\"0.04\"\n            android:text=\"@string/kit_de_produtos\"\n            android:textColor=\"#ffffff\"\n            android:textSize=\"14sp\"\n            android:textStyle=\"normal\" />\n    </LinearLayout>\n  `\n\n  return (\n    <Highlight>\n      { test }\n    </Highlight>\n  )\n}\n\nexport default React.memo(AndroidishLayout)\n","import React, { useState } from 'react'\nimport CodeMirror from 'react-codemirror'\nimport styled from 'styled-components'\nimport FakeButPlausibleAndroidLayout from './FakeButPlausibleAndroidLayout'\n\nimport 'codemirror/mode/haml/haml'\n\nconst Container = styled.div`\n  position: relative;\n  width: 50vw;\n  height: 700px;\n  background-color: #232323;\n  overflow: scroll;\n`\n\nconst TextArea = styled.input`\n  display: inline;\n  width: ${ props => props.width};\n  background-color: #232323;\n  border: 0;\n  padding: 0;\n  outline: 0;\n  font-family:  source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace;\n  color: rgb(165, 194, 97);\n  font-size: 1em;\n  position: relative;\n`\n\nconst NonEditable = styled.span`\n  display: inline;\n  background-color: #232323;\n  border: 0;\n  padding: 0;\n  outline: 0;\n  font-family:  source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace;\n  color: white;\n  font-size: 1em;\n`\n\nconst Editable = styled.div`\n  background-color: red;\n\n  ::after {\n    position: absolute;\n    z-index: 9;\n    right: -20px;\n    content: '←';\n    color: white;\n  }\n`\n\nconst AndroidPrefix = styled(NonEditable)`color: #6d9cbe;`\nconst EqualSign = styled(NonEditable)`color: #e8bf6a;`\n\nconst String1 = styled.div`\n  top: 502px;\n  left: 122px;\n  position: absolute;\n`\n\nconst TextField = ({ localizationString, setLocalizationString }) => {\n  const CHARACTER_WIDTH = 10\n\n  const [code, setCode] = useState('')\n  const [stringWidth, setStringWidth] = useState(\"240px\")\n\n  const getPixelWidth = (string) => (\n    `${string.length * CHARACTER_WIDTH}px`\n  )\n\n  const updateString = (string) => {\n    setStringWidth(`${string.length * CHARACTER_WIDTH}px`)\n    setLocalizationString(string)\n  }\n\n  return (\n    <Container>\n      <FakeButPlausibleAndroidLayout />\n      <String1>\n        <Editable>\n          <AndroidPrefix>android:text</AndroidPrefix>\n          <EqualSign>=</EqualSign>\n          <TextArea value={ localizationString }\n                    width={ stringWidth }\n                    onChange={ (e) => updateString(e.target.value)  }/>\n        </Editable>\n      </String1>\n    </Container>\n  )\n}\n\nexport default React.memo(TextField)\n","import React, { useState } from 'react'\nimport CodeMirror from 'react-codemirror'\nimport styled from 'styled-components'\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\nimport 'codemirror/mode/xml/xml'\n\nconst Container = styled.div`\n  width: 50vw;\n`\n\nexport default ({ languages, updateFile }) => {\n  const [language, setLanguage] = useState('language_1')\n\n  return (\n    <Tabs>\n    <TabList style={{ backgroundColor: 'white', marginBottom: 0 }}>\n      { languages.map((_, index) =>\n          <Tab onClick={() => setLanguage(`language_${index+1}`) }>Language {index + 1}</Tab>\n        )\n      }\n    </TabList>\n    { languages.map(l => (\n      <TabPanel>\n        <Container>\n          <CodeMirror value={ l }\n                      options={{ mode: 'xml' }}\n                      onChange={ (e) => updateFile(language, e) }/>\n        </Container>\n      </TabPanel>\n    ))}\n  </Tabs>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  background-color: white;\n  width: 360px;\n  height: 750px;\n  margin-top: 80px;\n  border-radius: 30px;\n  border: 20px solid #171717;\n  position: relative;\n  padding: 15px;\n`\n\nconst Notch = styled.div`\n  position: absolute;\n  width: 280px;\n  height: 40px;\n  border-radius: 20px;\n  left: 55px;\n  top: -20px;\n  background-color: black;\n`\n\nconst ControlButton = styled.div`\n  width: 15px;\n  height: 15px;\n  border-radius: 15px;\n  position: absolute;\n  top: -25px;\n`\n\nexport default ({ localizations, language, localizationString }) => (\n  <Container>\n    <Notch />\n    <h1>{ localizations[language][localizationString] }</h1>\n  </Container>\n)\n","export const xmlToKeyValue = (xml) => {\n  try {\n    let kv = {}\n    let parser = new DOMParser();\n    let xmlDoc = parser.parseFromString(xml,\"text/xml\");\n\n    let x = xmlDoc.documentElement;\n    let strings = Object.values(x.childNodes)\n                        .filter(y => y.nodeName === 'string')\n                        .map(y => [y.getAttribute('name'),\n                                   y.childNodes[0].nodeValue])\n\n    for(let i = 0; i < strings.length; i++) {\n      kv[strings[i][0]] = strings[i][1]\n    }\n\n    return kv\n  }\n  catch {\n    return undefined\n  }\n}\n","import React, { useState, useReducer } from 'react';\nimport ServerLocalizationTextField from './components/ServerLocalizationTextField'\nimport ServerLocalizations from './components/ServerLocalizations'\nimport styled from 'styled-components'\nimport 'codemirror/lib/codemirror.css'\nimport BrowserView from './components/BrowserView'\nimport { xmlToKeyValue } from './utilities'\n\nconst Container = styled.div`\n  background-color: #002b36;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`\n\nconst Localizations = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Preview = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst language_1 = `\n  <resources>\n      <string name=\"string_1\">hello, world!</string>\n      <string name=\"string_2\">goodnight, moon!</string>\n  </resources>\n`\n\nconst language_2 = `\n  <resources>\n      <string name=\"string_1\">hola munda!</string>\n      <string name=\"string_2\">adios moono!</string>\n  </resources>\n`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_STRING':\n      console.log('ho')\n      return { ...state, [action.language]: { ...state[action.language], [action.identifier]: action.string }}\n    case 'UPDATE_FILE':\n      console.log('hi')\n      return { ...state, [action.language]: action.text }\n    default:\n      throw new Error();\n  }\n}\n\nfunction App() {\n  const INITIAL_STATE = { language_1: xmlToKeyValue(language_1),\n                          language_2: xmlToKeyValue(language_2) }\n\n  const [localizations, dispatch] = useReducer(reducer, INITIAL_STATE);\n  const [language, setLanguage] = useState('language_1')\n  const [localizationString, setLocalizationString] = useState('company_name')\n\n  return (\n    <Container>\n      <Localizations>\n        <ServerLocalizationTextField localizationString={ localizationString }\n                                     setLocalizationString={ setLocalizationString }/>\n        <ServerLocalizations languages={ [language_1, language_2 ] }\n                             updateFile={ (language, text) => dispatch({ type: 'UPDATE_FILE',\n                                                                       language,\n                                                                       text: xmlToKeyValue(text) }) }/>\n      </Localizations>\n      <Preview>\n        <div>\n          <select onChange={ (e) => { setLanguage(e.target.value) } } value={ language }>\n            <option value=\"language_1\">Language 1</option>\n            <option value=\"language_2\">Language 2</option>\n          </select>\n        </div>\n        <BrowserView localizations={ localizations }\n                     localizationString={ localizationString }\n                     language={ language }/>\n      </Preview>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}